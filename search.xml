<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/05/10/hello-world/</url>
    <content><![CDATA[<h1 id="样式1"><a href="#样式1" class="headerlink" title="样式1"></a>样式1</h1><div class="tabs" id="方法"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#方法-1">方法 1</button></li><li class="tab"><button type="button" data-href="#方法-2">方法 2</button></li><li class="tab active"><button type="button" data-href="#方法-3">方法 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="方法-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="方法-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="方法-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h1 id="样式2"><a href="#样式2" class="headerlink" title="样式2"></a>样式2</h1><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一個Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸彈</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字為第一個Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有圖標 沒有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<p>This is my website, click the button <a class="btn-beautify button--animated " href="https://butterfly.js.org/" 
  title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify button--animated " href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify button--animated outline" href="https://butterfly.js.org/" 
  title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify button--animated outline" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify button--animated larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p>
<a class="btn-beautify button--animated larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated blue larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated pink larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated red larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated purple larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated orange larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated green larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>




<div class="btn-center">
<a class="btn-beautify button--animated outline larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated outline blue larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated outline pink larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated outline red larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated outline purple larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated outline orange larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated outline green larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
</div>

<hr>
<p>你看我長得漂亮不</p>
<p><img src="/img/tx.png"></p>
<p>我覺得很漂亮 <img class="inline-img" src="/img/tx.png" style="height:150px"/></p>
<p>臣亮言：<mark class="hl-label default">先帝</mark> 創業未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此誠<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈於內；<mark class="hl-label purple">忠志之士</mark> ，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。<br>宮中、府中，俱為一體；陟罰臧否，不宜異同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及為忠善者，宜付有司，論其刑賞，以昭陛下平明之治；不宜偏私，使內外異法也。</p>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>spring源码学习</title>
    <url>/2021/05/11/spring%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="杂谈IOC"><a href="#杂谈IOC" class="headerlink" title="杂谈IOC"></a>杂谈IOC</h1><h3 id="SmartInitializingSingleton"><a href="#SmartInitializingSingleton" class="headerlink" title="SmartInitializingSingleton"></a><code>SmartInitializingSingleton</code></h3><ul>
<li><p>实例化完后调用这个接口的方法<code>afterSingletonsInstantiated()</code>比如定时任务的启动</p>
<h3 id="ClassPathBeanDefinitionScanner"><a href="#ClassPathBeanDefinitionScanner" class="headerlink" title="ClassPathBeanDefinitionScanner"></a><code>ClassPathBeanDefinitionScanner</code></h3></li>
<li><p>可以扫描注入类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    ClassPathBeanDefinitionScanner scanner = <span class="keyword">new</span> ClassPathBeanDefinitionScanner(registry);</span><br><span class="line">      <span class="comment">//需要过滤的注解</span></span><br><span class="line">    scanner.addIncludeFilter(<span class="keyword">new</span> AnnotationTypeFilter(MyService.class));</span><br><span class="line">    scanner.scan(<span class="string">&quot;com.enjoy.jack.customBean&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="各种姿势导入BeanDefinition类"><a href="#各种姿势导入BeanDefinition类" class="headerlink" title="各种姿势导入BeanDefinition类"></a>各种姿势导入<code>BeanDefinition</code>类</h3><ul>
<li><code>BeanDefinitionRegistryPostProcessor</code>实现了<code>BeanFactoryPostProcessor</code><br><img src="/spring/BeanDefinitionRegistryPostProcessor.png"></li>
<li><code>ImportBeanDefinitionRegistrar</code><br><img src="/spring/ImportBeanDefinitionRegistrar.png"></li>
<li><code>ImportSelector</code><br><img src="/spring/ImportSelector.png"></li>
<li><code>DeferredImportSelector</code>涉及一个Group的实现目前没有去梳理<br><img src="/spring/DeferredImportSelector.png"></li>
</ul>
<h3 id="多个很重要的类"><a href="#多个很重要的类" class="headerlink" title="多个很重要的类"></a>多个很重要的类</h3><ul>
<li>执行方法是 </li>
</ul>
<div class="tabs" id="方法"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#方法-1">方法 1</button></li><li class="tab active"><button type="button" data-href="#方法-2">方法 2</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="方法-1"><pre><code> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> AnnotationConfigApplicationContext() </span><br><span class="line">-&gt;<span class="keyword">this</span>.reader = <span class="keyword">new</span> AnnotatedBeanDefinitionReader(<span class="keyword">this</span>)</span><br><span class="line">-&gt;<span class="keyword">this</span>(registry, getOrCreateEnvironment(registry))</span><br><span class="line">-&gt;AnnotationConfigUtils.registerAnnotationConfigProcessors(<span class="keyword">this</span>.registry)</span><br><span class="line">-&gt;registerAnnotationConfigProcessors(registry, <span class="keyword">null</span>)</span><br></pre></td></tr></table></figure>
 
</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="方法-2"><pre><code>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring.xml&quot;</span>)</span><br><span class="line">&gt;<span class="keyword">this</span>(<span class="keyword">new</span> String[] &#123;configLocation&#125;, <span class="keyword">true</span>, <span class="keyword">null</span>)</span><br><span class="line">&gt;refresh()</span><br><span class="line">&gt;ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory()</span><br><span class="line">&gt;refreshBeanFactory()</span><br><span class="line">&gt;loadBeanDefinitions(beanFactory)</span><br><span class="line">&gt;doLoadBeanDefinitions(inputSource, encodedResource.getResource())</span><br><span class="line">&gt;<span class="keyword">int</span> count = registerBeanDefinitions(doc, resource)</span><br><span class="line">&gt;documentReader.registerBeanDefinitions(doc, createReaderContext(resource))</span><br><span class="line">&gt;doRegisterBeanDefinitions(doc.getDocumentElement())</span><br><span class="line">&gt;parseBeanDefinitions(root, <span class="keyword">this</span>.delegate)</span><br><span class="line">&gt;delegate.parseCustomElement(ele) </span><br><span class="line">&gt;NamespaceHandlerSupport.parse(ele, <span class="keyword">new</span> ParserContext(<span class="keyword">this</span>.readerContext, <span class="keyword">this</span>, containingBd))</span><br><span class="line">&gt;ComponentScanBeanDefinitionParser.parser(element, parserContext)</span><br><span class="line">&gt;registerComponents(parserContext.getReaderContext(), beanDefinitions, element)</span><br><span class="line">&gt;AnnotationConfigUtils.registerAnnotationConfigProcessors(readerContext.getRegistry(), source)</span><br></pre></td></tr></table></figure>
</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<ul>
<li>路线寻找中会有一个很重要的类<code>ComponentScanBeanDefinitionParser</code>和<code>ComponentScanAnnotationParser</code>,前一个是XML解析用的，后面一个是注解解析用的</li>
<li><code>ConfigurationClassPostProcessor </code>配置类后置处理器</li>
<li><code>AutowiredAnnotationBeanPostProcessor</code>和<code>CommonAnnotationBeanPostProcessor</code>是实现了<code>InitDestroyAnnotationBeanPostProcessor</code>这个作用是主要放入初始销毁方法的注解<code>@PostConstruct</code>，<code>@PreDestroy</code>和<code>@Resource</code>这个java原生注解，后面类完成的时候调用初始和销毁方法。</li>
</ul>
<h3 id="多实例，别样的注入姿势"><a href="#多实例，别样的注入姿势" class="headerlink" title="多实例，别样的注入姿势"></a>多实例，别样的注入姿势</h3><ul>
<li>当有一个类有多个实体的时候，必须用<code>@Qualifier</code>指定别名，否者获取就会报错，同时用<code>getBean(Class class)</code>方法已经会报错了，报错描述是<code>bean found among candidates: [lison2, lison3]</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Conditional(value = &#123;CustomCondition.class, CustomCondition1.class&#125;)</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Lison <span class="title">lison2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Lison();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Conditional(value = &#123;CustomCondition.class, CustomCondition1.class&#125;)</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Lison <span class="title">lison3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Lison();</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;lison2&quot;)</span></span><br><span class="line">Lison lison2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;lison3&quot;)</span></span><br><span class="line">Lison lison3;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="aop"><a href="#aop" class="headerlink" title="aop"></a><code>aop</code></h1><h3 id="MethodInterceptor方法拦截器"><a href="#MethodInterceptor方法拦截器" class="headerlink" title="MethodInterceptor方法拦截器"></a><code>MethodInterceptor</code>方法拦截器</h3><h1 id="spring-boot"><a href="#spring-boot" class="headerlink" title="spring boot"></a>spring boot</h1><h3 id="ConfigurationProperties注解剖析"><a href="#ConfigurationProperties注解剖析" class="headerlink" title="ConfigurationProperties注解剖析"></a><code>ConfigurationProperties</code>注解剖析</h3><ul>
<li>注意<code>ConfigurationProperties</code>这个注解，是在类实例化后<code>ConfigurationPropertiesBindingPostProcessor</code>去执行解析绑定操作</li>
</ul>
<h1 id="mvc"><a href="#mvc" class="headerlink" title="mvc"></a>mvc</h1><h3 id="启动加载"><a href="#启动加载" class="headerlink" title="启动加载"></a>启动加载</h3><ul>
<li><code>StandardContext#startInternal()#this.listenerStart()</code>调用<code>ContextLoaderListener</code>这个监听</li>
<li>执行初始化映射关联<code>@EnableWebMvc#@Import(DelegatingWebMvcConfiguration.class)#RequestMappingHandlerMapping requestMappingHandlerMapping()</code>创建号<code>RequestMappingHandlerMapping</code>时候调用<code>InitializingBean#afterPropertiesSet()#initHandlerMethods()#processCandidateBean(beanName)</code>生成一个很关键的一个对象<code>RequestMappingInfo</code></li>
</ul>
<h1 id="数据库动态路由"><a href="#数据库动态路由" class="headerlink" title="数据库动态路由"></a>数据库动态路由</h1><h3 id="AbstractRoutingDataSource实现"><a href="#AbstractRoutingDataSource实现" class="headerlink" title="AbstractRoutingDataSource实现"></a><code>AbstractRoutingDataSource</code>实现</h3><ul>
<li>1.<code>aop</code>切面</li>
<li>2.继承<code>AbstractRoutingDataSource </code>其实实现一个钩子方法<code>determineCurrentLookupKey</code>，当选择数据源的时候取值的时候从Map里去取。</li>
<li>3.配置主从<code>masterDataSource</code>，<code>slaveDataSource</code></li>
<li>4.配置动态数据源<code>myRoutingDataSource</code></li>
<li>5.配置<code>getSqlSessionFactoryBean</code></li>
<li>6.一般是配合<code>ThreadLocal</code>容器来动态管理这个切换</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbConfig</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mybatis.mapperLocations&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mapperXmlPath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;masterDataSource&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;c3p0-master&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getMasterDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;slaveDataSource&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;c3p0-slave&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getSlaveDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSource dataSource = DataSourceBuilder.create().build();</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;myRoutingDataSource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">myRoutingDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;Object, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(DataSourceType.MASTER, getMasterDataSource());</span><br><span class="line">        map.put(DataSourceType.SLVAE, getSlaveDataSource());</span><br><span class="line">        MyRoutingDataSource myRoutingDataSource = <span class="keyword">new</span> MyRoutingDataSource();</span><br><span class="line">        myRoutingDataSource.setTargetDataSources(map);</span><br><span class="line">        myRoutingDataSource.setDefaultTargetDataSource(getMasterDataSource());</span><br><span class="line">        <span class="keyword">return</span> myRoutingDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title">getSqlSessionFactoryBean</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionBean.setDataSource(myRoutingDataSource());</span><br><span class="line">  sqlSessionBean.setMapperLocations(applicationContext.getResources(<span class="string">&quot;classpath*:mapper/*.xml&quot;</span>));</span><br><span class="line">      sqlSessionBean.setMapperLocations(applicationContext.getResources(mapperXmlPath));</span><br><span class="line">        <span class="keyword">return</span> sqlSessionBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRoutingDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceHolder.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>spring源码</tag>
      </tags>
  </entry>
  <entry>
    <title>算法</title>
    <url>/2021/05/11/%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="目前收录10种排序算法"><a href="#目前收录10种排序算法" class="headerlink" title="目前收录10种排序算法"></a>目前收录10种排序算法</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array.length == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> array;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">/*循环数组长度的次数*/</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            <span class="comment">/*从第0个元素开始，依次和后面的元素进行比较*/</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; array.length; j++)&#123;</span><br><span class="line">                <span class="comment">/*如果第j个元素比后面的第j+1元素大，交换两者的位置*/</span></span><br><span class="line">                <span class="keyword">if</span> (array[j + <span class="number">1</span>] &lt; array[j]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = array[j + <span class="number">1</span>];</span><br><span class="line">                    array[j + <span class="number">1</span>] = array[j];</span><br><span class="line">                    array[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">sort</span><span class="params">(ArrayList&lt;Integer&gt; array, <span class="keyword">int</span> bucketSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.size() &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> array;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = array.get(<span class="number">0</span>), min = array.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 找到最大值最小值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array.get(i) &gt; max)&#123;</span><br><span class="line">               max = array.get(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (array.get(i) &lt; min)&#123;</span><br><span class="line">               min = array.get(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*获得桶的数量*/</span></span><br><span class="line">        <span class="keyword">int</span> bucketCount = (max - min) / bucketSize + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">/*构建桶*/</span></span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketArr = <span class="keyword">new</span> ArrayList&lt;&gt;(bucketCount);</span><br><span class="line">        ArrayList&lt;Integer&gt; resultArr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bucketCount; i++) &#123;</span><br><span class="line">            bucketArr.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*将原始数组中的数据分配到桶中*/</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            bucketArr.get((array.get(i) - min) / bucketSize).add(array.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bucketCount; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bucketSize == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; bucketArr.get(i).size(); j++)</span><br><span class="line">                    resultArr.add(bucketArr.get(i).get(j));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bucketCount == <span class="number">1</span>)</span><br><span class="line">                    bucketSize--;</span><br><span class="line">                <span class="comment">/*对桶中的数据再次用桶进行排序*/</span></span><br><span class="line">                ArrayList&lt;Integer&gt; temp = sort(bucketArr.get(i), bucketSize);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; temp.size(); j++)</span><br><span class="line">                    resultArr.add(temp.get(j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultArr;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array.length == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> array;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/*寻找数组中最大值，最小值</span></span><br><span class="line"><span class="comment">      * bias:偏移量,用以定位原始数组每个元素在计数数组中的下标位置*/</span></span><br><span class="line">      <span class="keyword">int</span> bias, min = array[<span class="number">0</span>], max = array[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (array[i] &gt; max)&#123;</span><br><span class="line">              max = array[i];</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (array[i] &lt; min)&#123;</span><br><span class="line">              min = array[i];</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      bias = <span class="number">0</span> - min;</span><br><span class="line">      <span class="comment">/*获得计数数组的容量*/</span></span><br><span class="line">      <span class="keyword">int</span>[] counterArray = <span class="keyword">new</span> <span class="keyword">int</span>[max - min + <span class="number">1</span>];</span><br><span class="line">      Arrays.fill(counterArray, <span class="number">0</span>);</span><br><span class="line">      <span class="comment">/*遍历整个原始数组，将原始数组中每个元素值转化为计数数组下标，</span></span><br><span class="line"><span class="comment">      并将计数数组下标对应的元素值大小进行累加*/</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">          counterArray[array[i] + bias]++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/*访问原始数组时的下标计数器*/</span></span><br><span class="line">      <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">/*访问计数数组时的下标计数器*/</span></span><br><span class="line">      <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">/*访问计数数组，将计数数组中的元素转换后，重新写回原始数组*/</span></span><br><span class="line">      <span class="keyword">while</span> (index &lt; array.length) &#123;</span><br><span class="line">          <span class="comment">/*只要计数数组中当前下标元素的值不为0，就将计数数组中的元素转换后，重新写回原始数组*/</span></span><br><span class="line">          <span class="keyword">if</span> (counterArray[i] != <span class="number">0</span>) &#123;</span><br><span class="line">              array[index] = i - bias;</span><br><span class="line">              counterArray[i]--;</span><br><span class="line">              index++;</span><br><span class="line">          &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">               i++;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> array;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> array;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="comment">/*最小数的下标，每个循环开始总是假设第一个数最小*/</span></span><br><span class="line">            <span class="keyword">int</span> minIndex=i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; array.length; j++) &#123;</span><br><span class="line">                <span class="comment">/*找到最小的数*/</span></span><br><span class="line">                <span class="keyword">if</span> (array[j] &lt; array[minIndex]) &#123;</span><br><span class="line">                    <span class="comment">/*将最小数的索引保存*/</span></span><br><span class="line">                    minIndex = j; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*交换最小数和i当前所指的元素*/</span></span><br><span class="line">            <span class="keyword">int</span> temp = array[minIndex];</span><br><span class="line">            array[minIndex] = array[i];</span><br><span class="line">            array[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line">    <span class="comment">//声明全局变量，用于记录数组array的长度；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">        len = array.length;</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">1</span>) <span class="keyword">return</span> array;</span><br><span class="line">        <span class="comment">//1.构建一个最大堆</span></span><br><span class="line">        buildMaxHeap(array);</span><br><span class="line">        <span class="comment">//2.循环将堆首位（最大值）与末位交换，然后在重新调整最大堆</span></span><br><span class="line">        <span class="keyword">while</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            swap(array, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">            len--;</span><br><span class="line">            adjustHeap(array, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立最大堆</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从最后一个非叶子节点开始向上构造最大堆</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = (len/<span class="number">2</span>-<span class="number">1</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            adjustHeap(array, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调整使之成为最大堆</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxIndex = i;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">2</span>*i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">2</span>*(i+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//如果有左子树，且左子树大于父节点，则将最大指针指向左子树</span></span><br><span class="line">        <span class="keyword">if</span> (left &lt; len &amp;&amp; array[left] &gt; array[maxIndex])&#123;</span><br><span class="line">            maxIndex = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果有右子树，且右子树大于父节点，则将最大指针指向右子树</span></span><br><span class="line">        <span class="keyword">if</span> (right &lt; len &amp;&amp; array[right] &gt; array[maxIndex])&#123;</span><br><span class="line">             maxIndex = right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果父节点不是最大值，则将父节点与最大值交换，并且递归调整与父节点交换的位置。</span></span><br><span class="line">        <span class="keyword">if</span> (maxIndex != i) &#123;</span><br><span class="line">            swap(array, maxIndex, i);</span><br><span class="line">            adjustHeap(array, maxIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换数组内两个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = array[i];</span><br><span class="line">        array[i] = array[j];</span><br><span class="line">        array[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">       <span class="keyword">if</span> (array.length == <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> array;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">int</span> currentValue;<span class="comment">/*当前待排序数据，该元素之前的元素均已被排序过*/</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">int</span> preIndex = i;<span class="comment">/*已被排序数据的索引*/</span></span><br><span class="line">           currentValue = array[preIndex + <span class="number">1</span>];</span><br><span class="line">           <span class="comment">/*在已被排序过数据中倒序寻找合适的位置，如果当前待排序数据比比较的元素要小，</span></span><br><span class="line"><span class="comment">           将比较的元素元素后移一位*/</span></span><br><span class="line">           <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; currentValue &lt; array[preIndex]) &#123;</span><br><span class="line">               <span class="comment">//将当前元素后移一位</span></span><br><span class="line">               array[preIndex + <span class="number">1</span>] = array[preIndex];</span><br><span class="line">               preIndex--;</span><br><span class="line">               PrintArray.print(array);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">/*while循环结束时，说明已经找到了当前待排序数据的合适位置，插入*/</span></span><br><span class="line">           array[preIndex + <span class="number">1</span>] = currentValue;      </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> array;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><div class="tabs" id="方法"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#方法-1">方法 1</button></li><li class="tab active"><button type="button" data-href="#方法-2">方法 2</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="方法-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end) &#123;</span><br><span class="line">        <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;array[start]&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span>[] leftSort = sort(array, start, mid);</span><br><span class="line">        <span class="keyword">int</span>[] rightSort = sort(array, mid + <span class="number">1</span>, end);</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[leftSort.length + rightSort.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, left = <span class="number">0</span>, right = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (left &gt;= leftSort.length) &#123;</span><br><span class="line">                result[i] = rightSort[right++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (right &gt;= rightSort.length) &#123;</span><br><span class="line">                result[i] = leftSort[left++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (leftSort[left] &gt;= rightSort[right]) &#123;</span><br><span class="line">                result[i] = leftSort[left++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result[i] = rightSort[right++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="方法-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> array;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*切分数组，然后递归调用*/</span></span><br><span class="line">        <span class="keyword">int</span> mid = array.length / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span>[] left = Arrays.copyOfRange(array, <span class="number">0</span>, mid);</span><br><span class="line">        <span class="keyword">int</span>[] right = Arrays.copyOfRange(array, mid, array.length);</span><br><span class="line">        <span class="keyword">return</span> merge(sort(left), sort(right));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 归并排序——将两段排序好的数组结合成一个排序数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] merge(<span class="keyword">int</span>[] left, <span class="keyword">int</span>[] right) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[left.length + right.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>; index &lt; result.length; index++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= left.length)&#123;</span><br><span class="line">                <span class="comment">/*左边数组已经取完，完全取右边数组的值即可*/</span></span><br><span class="line">                result[index] = right[j++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j &gt;= right.length)&#123;</span><br><span class="line">                <span class="comment">/*右边数组已经取完，完全取左边数组的值即可*/</span></span><br><span class="line">                result[index] = left[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (left[i] &gt; right[j])&#123;</span><br><span class="line">                <span class="comment">/*左边数组的元素值大于右边数组，取右边数组的值*/</span></span><br><span class="line">                result[index] = right[j++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">/*右边数组的元素值大于左边数组，取左边数组的值*/</span></span><br><span class="line">                result[index] = left[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PrintArray.print(PrintArray.SRC);</span><br><span class="line">        System.out.println(<span class="string">&quot;============================================&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span>[] dest = MergeSort.sort(PrintArray.SRC);</span><br><span class="line">        PrintArray.print(dest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array.length &lt; <span class="number">1</span> || start &lt; <span class="number">0</span> || end &gt;= array.length || start &gt; end)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*数据分割成独立的两部分时，从哪儿分区的指示器*/</span></span><br><span class="line">        <span class="keyword">int</span> zoneIndex = partition(array, start, end);</span><br><span class="line">        <span class="keyword">if</span> (zoneIndex &gt; start) &#123;</span><br><span class="line">            sort(array, start, zoneIndex - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zoneIndex &lt; end)&#123;</span><br><span class="line">            sort(array, zoneIndex + <span class="number">1</span>, end);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速排序算法——partition</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = (<span class="keyword">int</span>) (start + Math.random() * (end - start + <span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;开始下标：&quot;</span>+start+<span class="string">&quot;,结束下标:&quot;</span>+end+<span class="string">&quot;,基准数下标：&quot;</span></span><br><span class="line">                +pivot+<span class="string">&quot;,元素值:&quot;</span>+array[pivot]);</span><br><span class="line">        <span class="comment">/*zoneIndex是分割指示器</span></span><br><span class="line"><span class="comment">        从业务上来说：比基准数小的，放到指示器的左边，比基准数大的，放到指示器的右边，</span></span><br><span class="line"><span class="comment">        * 但在实际实现时，通过移动比基准数小的元素和分割指示器本身也可以达到一样的效果*/</span></span><br><span class="line">        <span class="keyword">int</span> zoneIndex = start - <span class="number">1</span>;</span><br><span class="line">        swap(array, pivot, end);<span class="comment">/*将基准数和数组尾元素交换位置*/</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] &lt;= array[end]) &#123;<span class="comment">/*当前元素小于等于基准数*/</span></span><br><span class="line">                zoneIndex++;<span class="comment">/*首先分割指示器累加*/</span></span><br><span class="line">                <span class="keyword">if</span> (i &gt; zoneIndex)&#123;    </span><br><span class="line">                <span class="comment">/*当前元素在分割指示器的右边时，交换当前元素和分割指示器元素*/</span></span><br><span class="line">                    swap(array, i, zoneIndex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> zoneIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换数组内两个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = array[i];</span><br><span class="line">        array[i] = array[j];</span><br><span class="line">        array[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> array;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*找出最大数*/</span></span><br><span class="line">        <span class="keyword">int</span> max = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            max = Math.max(max, array[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*先算出最大数的位数*/</span></span><br><span class="line">        <span class="keyword">int</span> maxDigit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (max != <span class="number">0</span>) &#123;</span><br><span class="line">            max /= <span class="number">10</span>;</span><br><span class="line">            maxDigit++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mod = <span class="number">10</span>, div = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">/*构建桶*/</span></span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketList = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            bucketList.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*按照从右往左的顺序，依次将每一位都当做一次关键字，然后按照该关键字对数组排序，</span></span><br><span class="line"><span class="comment">        每一轮排序都基于上轮排序后的结果*/</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxDigit; i++, mod *= <span class="number">10</span>, div *= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="comment">/*遍历原始数组，投入桶中*/</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> num = (array[j] % mod) / div;</span><br><span class="line">                bucketList.get(num).add(array[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*桶中的数据写回原始数组，清除桶，准备下一轮的排序*/</span></span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; bucketList.size(); j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; bucketList.get(j).size(); k++)&#123;</span><br><span class="line">                    array[index++] = bucketList.get(j).get(k);</span><br><span class="line">                &#125;   </span><br><span class="line">                bucketList.get(j).clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">     <span class="keyword">int</span> len = array.length;</span><br><span class="line">     <span class="comment">/*按增量分组后，每个分组中，temp代表当前待排序数据，该元素之前的元素均已被排序过*/</span></span><br><span class="line">     <span class="comment">/*gap指用来分组的增量，会依次递减*/</span></span><br><span class="line">     <span class="keyword">int</span> currentValue, gap = len / <span class="number">2</span>;</span><br><span class="line">     <span class="keyword">while</span> (gap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; len; i++) &#123;</span><br><span class="line">             currentValue = array[i];</span><br><span class="line">             <span class="comment">/*组内已被排序数据的索引*/</span></span><br><span class="line">             <span class="keyword">int</span> preIndex = i - gap;</span><br><span class="line">             <span class="comment">/*在组内已被排序过数据中倒序寻找合适的位置，如果当前待排序数据比比较的元素要小，</span></span><br><span class="line"><span class="comment">             并将比较的元素元素在组内后移一位*/</span></span><br><span class="line">             <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; array[preIndex] &gt; currentValue) &#123;</span><br><span class="line">                 array[preIndex + gap] = array[preIndex];</span><br><span class="line">                 preIndex -= gap;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">/*while循环结束时，说明已经找到了当前待排序数据的合适位置，插入*/</span></span><br><span class="line">             array[preIndex + gap] = currentValue;</span><br><span class="line">         &#125;</span><br><span class="line">         gap /= <span class="number">2</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> array;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>spring</title>
    <url>/2021/05/11/spring/</url>
    <content><![CDATA[<h1 id="Spring-源码学习简介"><a href="#Spring-源码学习简介" class="headerlink" title="Spring 源码学习简介"></a>Spring 源码学习简介</h1><ul>
<li>源码初始，根据Jack老师，Spring源码系列笔记整理，其中很多流程梳理和注释标注，很多细节需要跟源码，甚至调试代码才能知道原理。希望给大家带来一点点收获。没毛病吧，老铁。<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2></li>
<li>Jack老师目录已经很详细，这里就直接引用目录结构和顺序</li>
<li>Spring有很多扩展内容，比如埋点，又比如很多钩子方法，很多设计模式等，大家阅读的过程中多多留意。<h2 id="Jack老师的博客传送门"><a href="#Jack老师的博客传送门" class="headerlink" title="Jack老师的博客传送门"></a>Jack老师的博客传送门</h2><a href="https://blog.csdn.net/luoyang_java">Jack老师的博客地址</a><h2 id="思考spring源码给我们的好处"><a href="#思考spring源码给我们的好处" class="headerlink" title="思考spring源码给我们的好处"></a>思考spring源码给我们的好处</h2></li>
<li>在我们使用spring框架的过程中，知其然知其所以然，让每个注解，每个实现，每个用法，用得踏实。</li>
<li>提升大局观，代码阅读能力，及其写代码过程中如何优化自己的代码，达到代码伸缩性和扩展性良好。</li>
<li>总之好处多多。<h2 id="如何学习源码"><a href="#如何学习源码" class="headerlink" title="如何学习源码"></a>如何学习源码</h2></li>
<li>耐心，不怕难，要迎难而上，毕竟学习源码是一件有苦变甜的过程。</li>
<li>spring源码学习要多总结，由点到面，我建议是拓扑式学习法。</li>
<li>攻克spring源码是有难度的，但是，我们作为一个阅读者，就算再难，有作者写源码的过程难么。</li>
<li>遇见不懂的地方多多跟源码，断点调试。</li>
<li>spring源码的重要性就不需要我多说了，懂之必然懂。</li>
</ul>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>JDK1.8版本</li>
<li> spring 5.1.3.RELEASE最新版本</li>
<li> 补一下Lambda表达式的知识</li>
<li> Spring源码下载<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone --branch v5.1.3.RELEASE xxx.git</span><br></pre></td></tr></table></figure></li>
<li> 安装配置gradle，gradle需要支持JDK8的版本到下载的spring源码路径执行gradle命令<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gradlew:spring-oxm:compileTestJava</span><br></pre></td></tr></table></figure></li>
<li>用idea打开spring源码工程，在idea中安装插件kotlin，重启Idea把编译好的源码导入到工程中</li>
<li>这个过程很粗，不懂的同学百度一下攻略很多的。</li>
</ul>
<h2 id="搭建Spring-项目"><a href="#搭建Spring-项目" class="headerlink" title="搭建Spring 项目"></a>搭建Spring 项目</h2><ul>
<li>导入jar依赖，Spring中最核心的4个jar：<ul>
<li>spring-beans</li>
<li>spring-core</li>
<li>spring-context</li>
<li>spring-expression</li>
</ul>
</li>
<li>一个最最简单的spring工程，只需要一个jar就够了<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="开启-Spring-日志"><a href="#开启-Spring-日志" class="headerlink" title="开启 Spring 日志"></a>开启 Spring 日志</h2><p>添加spring依赖的日志jar，不然不会打印日志记录哟。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;logback-classic&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;LATEST&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Spring中XSD引入"><a href="#Spring中XSD引入" class="headerlink" title="Spring中XSD引入"></a>Spring中XSD引入</h2><blockquote>
<p>如果是xml解析就是启动类是<code>ClassPathXmlApplicationContext</code>这种的就会用到，后面你就知道了，这里留个悬念。<br>Spring中要引入自定义标签，必须要引入其对应的XSD文件。如：&lt;context:component-scan base-package=”com.xx.xx”/&gt;标签，必须要引入：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">http:<span class="comment">//www.springframework.org/schema/context</span></span><br><span class="line">http:<span class="comment">//www.springframework.org/schema/context/spring-context.xsd</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在标签对应的jar包下面找到对应的Spring.schemas，在这个文件中就会有对应的XSD路径和命名空间。<br>这里做个总结，为什么spring.xml文件有时候会飘红，大部分原因是XSD文件标签没有导入，导致代码运行过程中没有导入解析该标签的解析类，自然你写的标签类引入的功能就不会成功。</p>
</blockquote>
<h2 id="Spring容器加载的几种常见方式"><a href="#Spring容器加载的几种常见方式" class="headerlink" title="Spring容器加载的几种常见方式"></a>Spring容器加载的几种常见方式</h2><ul>
<li>类路径获取配置文件<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassPathXmlApplicationContext applicationContext= <span class="keyword">new</span>  ClassPathXmlApplicationContext(<span class="string">&quot;spring.xml&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li>文件系统路径获取配置文件<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileSystemXmlApplicationContext applicationContext = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">&quot;E:\xx\xx\spring.xml&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li>无配置文件加载容器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(<span class="string">&quot;com.xx.xx&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li>Springboot加载容器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> EmbeddedWebApplicationContext();</span><br></pre></td></tr></table></figure>
<h1 id="Spring-程序入口和xml解析"><a href="#Spring-程序入口和xml解析" class="headerlink" title="Spring 程序入口和xml解析"></a>Spring 程序入口和xml解析</h1></li>
<li>Spring 容器加载核心方法<ul>
<li><code>AbstractApplicationContext.refresh()</code>方法<code> refresh()</code>方法是 spring 容器启动过程中的核心方法，spring 容器要加载必须执行该方法。</li>
<li>xml解析，refresh之前，调用<code>createEnvironment()</code>创建<code>StandardEnvironment</code>和配置文件解析<code> resolvePath(locations[i])</code>实际上就是你传入的文件名字。<h2 id="Xml-流程分析"><a href="#Xml-流程分析" class="headerlink" title="Xml 流程分析"></a>Xml 流程分析</h2><img src="/spring/assets/image-20200107185247851.png"><h2 id="自定义标签解析"><a href="#自定义标签解析" class="headerlink" title="自定义标签解析"></a>自定义标签解析</h2></li>
</ul>
</li>
<li>获取自定义标签的 namespace 命令空间，例如：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//www.springframework.org/schema/context</span></span><br><span class="line">String namespaceUri = getNamespaceURI(ele);</span><br></pre></td></tr></table></figure></li>
<li> 根据命令空间获取 NamespaceHandler 对象。<blockquote>
<p>NamespaceUri 和NamespaceHandler 之间会建立一个映射，spring 会从所有的spring jar 包中扫描 spring.handlers 文件，建立映射关系。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NamespaceHandler handler = <span class="keyword">this</span>.readerContext.getNamespaceHandlerResolver().resolve( namespaceUri);</span><br><span class="line">Map&lt;String, Object&gt; handlerMappings = getHandlerMappings();</span><br><span class="line">Object handlerOrClassName = handlerMappings.get(namespaceUri);</span><br></pre></td></tr></table></figure></li>
<li> 3、反射获取 NamespaceHandler 实例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass);</span><br></pre></td></tr></table></figure></li>
<li> 4、调用 init 方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">namespaceHandler.init();</span><br></pre></td></tr></table></figure></li>
<li> 5、调用 parse 方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">handler.parse(ele, <span class="keyword">new</span> ParserContext(<span class="keyword">this</span>.readerContext,</span><br><span class="line"><span class="keyword">this</span>, containingBd))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>扩展 spring.handler文件其实就是 namespaceUri 和类的完整限定名的映射。<br>展示一个spring.handler文件，这里就解释了我们之前说的spring.xml文件有时候会飘红，莫名其妙一些类无法注入的问题，这里你应该得到了解答。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http\:<span class="comment">//www.springframework.org/schema/aop=org.springframework.aop.config.AopNamespaceHandler</span></span><br></pre></td></tr></table></figure>
<h2 id="Spring-初始化机制"><a href="#Spring-初始化机制" class="headerlink" title="Spring 初始化机制"></a>Spring 初始化机制</h2><blockquote>
<p>Spring 容器的初始化流程初探<br>Spring容器初始化的核心方法refresh()，下面主要分析<code>obtainFreshBeanFactory()</code>方法流程，也就是<code>BeanFactory </code>的创建过程的主要流程。<br>Spring 容器的加载方式有四种，下面以第一种类路径获取配置文件(<code>ClassPathXmlApplicationContext</code>)的方式，来看看Spring 容器初始化过程是如何创建<code>BeanFactory</code>的。</p>
<p>这里声明一下，这种解析是从spring.xml开始解析，然后在进行注解解析，时序不要和注解解析混淆了哟。</p>
</blockquote>
</li>
</ul>
<h2 id="Spring-初始化核心流程"><a href="#Spring-初始化核心流程" class="headerlink" title="Spring 初始化核心流程"></a>Spring 初始化核心流程</h2><ul>
<li>spring容器初始化的核心方法<code>AbstractApplicationContext#refresh</code> ，</li>
</ul>
<p>├─ <code>refresh Spring</code> 初始化核心流程入口<br>│ ├─ <code>prepareRefresh</code> ① 准备此上下文用于刷新，设置启动时间和active标志，初始化属性<br>│ ├─ <code>obtainFreshBeanFactory</code> ② 本节主要跟踪的源码流程<br>│ ├─ <code>prepareBeanFactory </code>③ 设置beanFactory的基本属性<br>│ ├─ <code>postProcessBeanFactory</code>④ 子类处理自定义的BeanFactoryPostProcess<br>│ ├─ <code>invokeBeanFactoryPostProcessors</code> ⑤ 调用所有的<code>BeanFactoryPostProcessor</code><br>│ ├─ <code>registerBeanPostProcessors</code> ⑥ 注册，把实现了<code>BeanPostProcessor</code>接口的类实例化，加到<code>BeanFactory</code><br>│ ├─ <code>initMessageSource </code>⑦ 初始化上下文中的资源文件，如国际化文件的处理等<br>│ ├─<code> initApplicationEventMulticaster</code> ⑧ 初始化上下文的事件传播器<br>│ ├─ <code>onRefresh</code> ⑨ 给子类扩展初始化其他<code>Bean，springboot </code>中用来做内嵌 tomcat 启动<br>│ ├─ <code>registerListeners</code> ⑩ 在所有bean中查找监听 bean，然后注册到广播器中<br>│ ├─ <code>finishBeanFactoryInitialization</code> ⑪ 初始化所有的单例<code>Bean、ioc、BeanPostProcessor</code>的执行、<code>Aop</code>入口<br>│ └─ <code>finishRefresh</code> ⑫ 完成刷新过程，发布相应的事件<br>以下源码流程是基于 <code>obtainFreshBeanFactory </code>方法内的执行流程，主要包括： 创建填充<code>BeanFactory xml</code>标签的解析 填充到<code>BeanDefinition</code>，并注入到Spring IOC 容器</p>
<blockquote>
<p>以下源码流程是基于 obtainFreshBeanFactory 方法内的执行流程，主要包括： 创建填充BeanFactory xml标签的解析 填充到BeanDefinition，并注入到Spring IOC 容器<br>甜点分享，这里面无处不在的钩子模式，导致源码跟踪过程中跳来跳去，自然难度就变大了，印证之前说的，有时候需要跟源码，断点调试才能知其然。</p>
</blockquote>
<blockquote>
<p>编写测试类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xmlTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext  applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ClassPathXmlApplicationContext"><a href="#ClassPathXmlApplicationContext" class="headerlink" title="ClassPathXmlApplicationContext()"></a><code>ClassPathXmlApplicationContext()</code></h3><blockquote>
<p>调用 <code>ClassPathXmlApplicationContext</code>构造方法，实例化<code>ClassPathXmlApplicationContext</code>上下文类文件：<code>org.springframework.context.support.ClassPathXmlApplicationContext</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String configLocation)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>(<span class="keyword">new</span> String[] &#123;configLocation&#125;, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>实际调用了<code>ClassPathXmlApplicationContext()</code>的重载方法类文件：<code>org.springframework.context.support.ClassPathXmlApplicationContext</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : ClassPathXmlApplicationContext的重载方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">			String[] configLocations, <span class="keyword">boolean</span> refresh, <span class="meta">@Nullable</span> ApplicationContext parent)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		<span class="comment">//实例化的时候，调用父类的构造函数</span></span><br><span class="line">		<span class="keyword">super</span>(parent);</span><br><span class="line">		<span class="comment">//创建解析器，解析configLocations</span></span><br><span class="line">		setConfigLocations(configLocations);</span><br><span class="line">		<span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">		   <span class="comment">//Spring容器初始化的核心方法</span></span><br><span class="line">			refresh();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="setConfigLocations"><a href="#setConfigLocations" class="headerlink" title="setConfigLocations()"></a><code>setConfigLocations()</code></h3><blockquote>
<p>进入<code> setConfigLocations()</code> 方法类文件：<code>org.springframework.context.support.AbstractRefreshableConfigApplicationContext</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 设置配置文件地址</span></span><br><span class="line"><span class="comment">* 参数locations 就是传递过来的字符串&quot;Spring.xml&quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigLocations</span><span class="params">(<span class="meta">@Nullable</span> String... locations)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (locations != <span class="keyword">null</span>) &#123;</span><br><span class="line">			Assert.noNullElements(locations, <span class="string">&quot;Config locations must not be null&quot;</span>);</span><br><span class="line">			<span class="keyword">this</span>.configLocations = <span class="keyword">new</span> String[locations.length];</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; locations.length; i++) &#123;</span><br><span class="line">				<span class="comment">//模糊匹配，不需要读</span></span><br><span class="line">				<span class="keyword">this</span>.configLocations[i] = resolvePath(locations[i]).trim();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">this</span>.configLocations = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h2 id="模糊匹配"><a href="#模糊匹配" class="headerlink" title="模糊匹配"></a>模糊匹配</h2><p>此处的模糊匹配，含有多种包含路径场景：</p>
<ul>
<li>比如：<code>/config/**/Spring.xml</code></li>
<li>比如：<code>/config/&#123;dev&#125;-Spring.xml </code>等等，只是进行过滤解析。</li>
</ul>
</blockquote>
<h3 id="refresh"><a href="#refresh" class="headerlink" title="refresh()"></a><code>refresh()</code></h3><blockquote>
<p>进入 <code>refresh()</code> 方法<br>类文件：<code>org.springframework.context.support.AbstractApplicationContext</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment"> *	TODO : 该方法是spring容器初始化的核心方法，是spring容器初始化的核心流程，</span></span><br><span class="line"><span class="comment"> *  是一个典型的父类模板设计模式的运用，根据不同的上下文对象,会掉到不同的上下文</span></span><br><span class="line"><span class="comment"> *  对象子类方法中。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *	核心上下文子类有：</span></span><br><span class="line"><span class="comment"> *	ClassPathXmlApplicationContext</span></span><br><span class="line"><span class="comment"> *	FileSystemXmlApplicationContext</span></span><br><span class="line"><span class="comment"> *	AnnotationConfigApplicationContext</span></span><br><span class="line"><span class="comment"> *	EmbeddedWebApplicationContext(springboot)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 方法重要程度：</span></span><br><span class="line"><span class="comment"> *  0：不重要，可以不看</span></span><br><span class="line"><span class="comment"> *  1：一般重要，可看可不看</span></span><br><span class="line"><span class="comment"> *  5：非常重要，一定要看</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  必须读的 ：重要程度 5</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * TODO :使用对象锁startUpShutdownMonitor进行同步控制:</span></span><br><span class="line"><span class="comment">	 * 1、避免了多线程同时刷新spring配置,只对不能并发的代码块进行加锁,</span></span><br><span class="line"><span class="comment">	 *   提高了整体代码运行的效率;</span></span><br><span class="line"><span class="comment">	 * 2、refresh()方法和 close()方法都使用了startUpShutdownMonitor对象锁加锁，</span></span><br><span class="line"><span class="comment">	 *   这就保证了在调用refresh()方法的时候无法调用close()方法,避免了冲突;</span></span><br><span class="line"><span class="comment">	 **/</span></span><br><span class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * TODO : 准备此上下文用于刷新</span></span><br><span class="line"><span class="comment">		 * 1、设置其启动日期和active标志</span></span><br><span class="line"><span class="comment">		 * 2、执行属性源的初始化。</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		prepareRefresh();</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * TODO : 创建填充BeanFactory功能，以及创建填充XmlBeanDefinitionReader对象</span></span><br><span class="line"><span class="comment">		 *    重要程度：5</span></span><br><span class="line"><span class="comment">		 * 1、创建BeanFactory对象</span></span><br><span class="line"><span class="comment">		 * 2、xml解析</span></span><br><span class="line"><span class="comment">		 * 	传统标签解析：bean、import等</span></span><br><span class="line"><span class="comment">		 * 	自定义标签解析 如：&lt;context:component-scan base-package=&quot;com.XXX.XXX&quot;/&gt;</span></span><br><span class="line"><span class="comment">		 * 	自定义标签解析流程：</span></span><br><span class="line"><span class="comment">		 * 		a、根据当前解析标签的头信息找到对应的 namespaceUri</span></span><br><span class="line"><span class="comment">		 * 		b、加载 spring 所有jar中的 spring.handlers 文件，并建立映射关系</span></span><br><span class="line"><span class="comment">		 * 		c、根据 namespaceUri 从映射关系中找到对应的实现了 NamespaceHandler 接口的类</span></span><br><span class="line"><span class="comment">		 * 		d、调用类的 init 方法， init 方法是注册了各种自定义标签的解析类</span></span><br><span class="line"><span class="comment">		 * 		e、根据 namespaceUri 找到对应的解析类，然后调用 paser 方法完成标签解析</span></span><br><span class="line"><span class="comment">		 *</span></span><br><span class="line"><span class="comment">		 * 3、把解析出来的xml标签封装成 BeanDefinition 对象</span></span><br><span class="line"><span class="comment">		 * */</span></span><br><span class="line">		<span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">		ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 给beanFactory设置一些属性值，可以不看</span></span><br><span class="line"><span class="comment">		 * */</span></span><br><span class="line">		prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">			<span class="comment">// 提供子类覆盖的额外处理，即子类处理自定义的BeanFactoryPostProcess</span></span><br><span class="line">			<span class="comment">// (如果有某个bean实现了BeanFactoryPostProcessor接口，那么在容器初始化以后，</span></span><br><span class="line">               <span class="comment">// Spring会自动调用里面的postProcessBeanFactory方法)</span></span><br><span class="line">			postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			* BeanDefinitionRegistryPostProcessor</span></span><br><span class="line"><span class="comment">			* BeanFactoryPostProcessor</span></span><br><span class="line"><span class="comment">			* 完成对这两个接口的调用</span></span><br><span class="line"><span class="comment">			* */</span></span><br><span class="line">			<span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">			<span class="comment">// 激活各种 BeanFactory 处理器，并调用 BeanFactoryPostProcessor 各个实现类</span></span><br><span class="line">               <span class="comment">// 的 postProcessBeanFactory(factory) 方法</span></span><br><span class="line">			invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			* 把实现了BeanPostProcessor接口的类实例化，并且加入到BeanFactory中</span></span><br><span class="line"><span class="comment">			* */</span></span><br><span class="line">			<span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">			<span class="comment">// 注册拦截 Bean创建的 Bean处理器，即注册 BeanPostProcessor</span></span><br><span class="line">			registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Initialize message source for this context.</span></span><br><span class="line">			<span class="comment">// 初始化上下文中的资源文件，如国际化文件的处理等</span></span><br><span class="line">			initMessageSource();</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">			<span class="comment">// 初始化上下文事件广播器（事件广播和监听机制是典型的观察者模式的实现）</span></span><br><span class="line">			initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 这个方法着重理解模板设计模式，因为在 springboot 中，这个方法是用来做内嵌 tomcat 启动的</span></span><br><span class="line">			<span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">			<span class="comment">// 给子类扩展初始化其他Bean</span></span><br><span class="line">			onRefresh();</span><br><span class="line"></span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			* 往事件管理类中注册事件类</span></span><br><span class="line"><span class="comment">			* */</span></span><br><span class="line">			<span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">			<span class="comment">// 在所有bean中查找listener bean，然后注册到广播器中</span></span><br><span class="line">			registerListeners();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			* 这个方法是spring中最重要的方法，没有之一</span></span><br><span class="line"><span class="comment">			* 所以这个方法一定要理解要具体看</span></span><br><span class="line"><span class="comment">			* TODO : 初始化所有的单例Bean(非延迟加载的)</span></span><br><span class="line"><span class="comment">			* 1、bean实例化过程</span></span><br><span class="line"><span class="comment">			* 2、ioc</span></span><br><span class="line"><span class="comment">			* 3、注解支持</span></span><br><span class="line"><span class="comment">			* 4、BeanPostProcessor的执行</span></span><br><span class="line"><span class="comment">			* 5、Aop的入口</span></span><br><span class="line"><span class="comment">			*</span></span><br><span class="line"><span class="comment">			* */</span></span><br><span class="line">			<span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">			finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">			<span class="comment">// 完成刷新过程,通知生命周期处理器 lifecycleProcessor 刷新过程,同时发出 </span></span><br><span class="line">               <span class="comment">// ContextRefreshEvent 通知别人</span></span><br><span class="line">			finishRefresh();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">			<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">				logger.warn(<span class="string">&quot;Exception encountered during context initialization - &quot;</span> +</span><br><span class="line">						<span class="string">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">			<span class="comment">// 销毁已经创建的Bean</span></span><br><span class="line">			destroyBeans();</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Reset &#x27;active&#x27; flag.</span></span><br><span class="line">			<span class="comment">// 重置容器激活标签</span></span><br><span class="line">			cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Propagate exception to caller.</span></span><br><span class="line">			<span class="keyword">throw</span> ex;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="comment">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class="line">			<span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">			<span class="comment">// 当我们可能再也不需要单例 bean的元数据时候，重置 Spring 核心的普通内省缓存</span></span><br><span class="line">			resetCommonCaches();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="obtainFreshBeanFactory"><a href="#obtainFreshBeanFactory" class="headerlink" title="obtainFreshBeanFactory()"></a><code>obtainFreshBeanFactory()</code></h3><blockquote>
<p>进入 <code>obtainFreshBeanFactory()</code>方法<br>类文件：<code>org.springframework.context.support.AbstractApplicationContext</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 获取bean工厂入口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 核心方法，必须读，重要程度：5</span></span><br><span class="line">		<span class="comment">// 模板涉及模式，子类实现钩子方法。</span></span><br><span class="line">		refreshBeanFactory();</span><br><span class="line">		<span class="keyword">return</span> getBeanFactory();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h4 id="refreshBeanFactory"><a href="#refreshBeanFactory" class="headerlink" title="refreshBeanFactory()"></a><code>refreshBeanFactory()</code></h4><blockquote>
<p>进入子类的 <code>refreshBeanFactory()</code>方法<br>类文件：<code>org.springframework.context.support.AbstractRefreshableApplicationContext</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 创建 bean 工厂</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		<span class="comment">//如果BeanFactory不为空，则清除BeanFactory和里面的实例</span></span><br><span class="line">		<span class="keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">			destroyBeans();</span><br><span class="line">			closeBeanFactory();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 创建DefaultListableBeanFactory(可以创建多个bean实例)</span></span><br><span class="line">			<span class="comment">// 和BeanFactory的区别：</span></span><br><span class="line">            <span class="comment">//	BeanFactory ：只能创建单个对象 bean实例</span></span><br><span class="line">            <span class="comment">//  DefaultListableBeanFactory：可以创建多个 bean实例</span></span><br><span class="line">			DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">            <span class="comment">// 设置 beanFactory的唯一标识</span></span><br><span class="line">			beanFactory.setSerializationId(getId());</span><br><span class="line">			<span class="comment">// 设置是否可以循环依赖 allowCircularReferences，默认允许。</span></span><br><span class="line">			<span class="comment">// 是否允许使用相同名称重新注册不同的bean实现.</span></span><br><span class="line">			customizeBeanFactory(beanFactory);</span><br><span class="line">			<span class="comment">// 解析xml，并把xml中的标签封装成BeanDefinition对象</span></span><br><span class="line">			loadBeanDefinitions(beanFactory);</span><br><span class="line">			<span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanFactoryMonitor) &#123;</span><br><span class="line">				<span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">&quot;I/O error parsing bean definition source for &quot;</span> + getDisplayName(), ex);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><code>customizeBeanFactory(beanFactory)</code>中关于设置是否循环依赖和是否可以覆盖bean定义名称，可以通过<code>applicationContext</code>上下文来修改，修改后必须要refresh()重新加载。建议不修改，没有意义。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">applicationContext.setAllowBeanDefinitionOverriding(<span class="keyword">false</span>);</span><br><span class="line">applicationContext.setAllowCircularReferences(<span class="keyword">true</span>);</span><br><span class="line">applicationContext.refresh();</span><br></pre></td></tr></table></figure>

<h4 id="loadBeanDefinitions"><a href="#loadBeanDefinitions" class="headerlink" title="loadBeanDefinitions()"></a><code>loadBeanDefinitions()</code></h4><blockquote>
<p>进入 <code>loadBeanDefinitions()</code>方法<br>类文件：<code>org.springframework.context.support.AbstractXmlApplicationContext</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 专门用来负责解析XML</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// Create a new XmlBeanDefinitionReader for the given BeanFactory.</span></span><br><span class="line">		<span class="comment">//创建xml的解析器，这里是一个委托模式</span></span><br><span class="line">		XmlBeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(beanFactory);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Configure the bean definition reader with this context&#x27;s</span></span><br><span class="line">		<span class="comment">// resource loading environment.</span></span><br><span class="line">		beanDefinitionReader.setEnvironment(<span class="keyword">this</span>.getEnvironment());</span><br><span class="line"></span><br><span class="line">		<span class="comment">//这里传一个this进去，因为ApplicationContext是实现了ResourceLoader接口的</span></span><br><span class="line">		beanDefinitionReader.setResourceLoader(<span class="keyword">this</span>);</span><br><span class="line">		beanDefinitionReader.setEntityResolver(<span class="keyword">new</span> ResourceEntityResolver(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Allow a subclass to provide custom initialization of the reader,</span></span><br><span class="line">		<span class="comment">// then proceed with actually loading the bean definitions.</span></span><br><span class="line">		initBeanDefinitionReader(beanDefinitionReader);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//主要看这个方法  重要程度 5</span></span><br><span class="line">		loadBeanDefinitions(beanDefinitionReader);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>进入 <code>loadBeanDefinitions()</code>的重载方法<br>类文件：<code>org.springframework.context.support.AbstractXmlApplicationContext</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 委托给XmlBeanDefinitionReader来进行解析</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(XmlBeanDefinitionReader reader)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</span><br><span class="line">		Resource[] configResources = getConfigResources();</span><br><span class="line">		<span class="keyword">if</span> (configResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">			reader.loadBeanDefinitions(configResources);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//获取需要加载的xml配置文件</span></span><br><span class="line">		String[] configLocations = getConfigLocations();</span><br><span class="line">		<span class="keyword">if</span> (configLocations != <span class="keyword">null</span>) &#123;</span><br><span class="line">		    <span class="comment">// 委托给XmlBeanDefinitionReader来进行解析</span></span><br><span class="line">			reader.loadBeanDefinitions(configLocations);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>进入<code> loadBeanDefinitions()</code>的重载方法<br>类文件：<code>org.springframework.context.support.AbstractBeanDefinitionReader</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 加载字符串到BeanDefinitions中，即&#x27;spring.xml&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(String... locations)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">		Assert.notNull(locations, <span class="string">&quot;Location array must not be null&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">		<span class="comment">//配置文件有多个，加载多个配置文件</span></span><br><span class="line">		<span class="keyword">for</span> (String location : locations) &#123;</span><br><span class="line">			<span class="comment">// 调用父类loadBeanDefinitions方法</span></span><br><span class="line">			count += loadBeanDefinitions(location);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> count;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>进入 <code>loadBeanDefinitions()</code>的重载方法<br>类文件：<code>org.springframework.context.support.AbstractBeanDefinitionReader</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 字符串类型的xml文件路径,转换成Resource对象类型。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(String location, <span class="meta">@Nullable</span> Set&lt;Resource&gt; actualResources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">		<span class="comment">// 获取上下文对象</span></span><br><span class="line">		ResourceLoader resourceLoader = getResourceLoader();</span><br><span class="line">		<span class="keyword">if</span> (resourceLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">					<span class="string">&quot;Cannot load bean definitions from location [&quot;</span> + location + <span class="string">&quot;]: no ResourceLoader available&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (resourceLoader <span class="keyword">instanceof</span> ResourcePatternResolver) &#123;</span><br><span class="line">			<span class="comment">// Resource pattern matching available.</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="comment">//把字符串类型的xml文件路径，形如：classpath*:user/**/*-context.xml,</span></span><br><span class="line">                <span class="comment">// 转换成Resource对象类型，其实就是用流</span></span><br><span class="line">				<span class="comment">//的方式加载配置文件，然后封装成Resource对象，不重要，可以不看</span></span><br><span class="line">				Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);</span><br><span class="line"></span><br><span class="line">				<span class="comment">//主要看这个方法 ** 重要程度 5</span></span><br><span class="line">				<span class="keyword">int</span> count = loadBeanDefinitions(resources);</span><br><span class="line">				<span class="keyword">if</span> (actualResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">					Collections.addAll(actualResources, resources);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">					logger.trace(<span class="string">&quot;Loaded &quot;</span> + count + <span class="string">&quot; bean definitions from location pattern [&quot;</span> + location + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> count;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">						<span class="string">&quot;Could not resolve bean definition resource pattern [&quot;</span> + location + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// Can only load single resources by absolute URL.</span></span><br><span class="line">			Resource resource = resourceLoader.getResource(location);</span><br><span class="line">			<span class="keyword">int</span> count = loadBeanDefinitions(resource);</span><br><span class="line">			<span class="keyword">if</span> (actualResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">				actualResources.add(resource);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">				logger.trace(<span class="string">&quot;Loaded &quot;</span> + count + <span class="string">&quot; bean definitions from location [&quot;</span> + location + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> count;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>进入 <code>loadBeanDefinitions()</code>的重载方法<br>类文件：<code>org.springframework.context.support.AbstractBeanDefinitionReader</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 得到转换成Resource对象类型个数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(Resource... resources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">		Assert.notNull(resources, <span class="string">&quot;Resource array must not be null&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">			<span class="comment">//模板设计模式，调用到子类中的方法</span></span><br><span class="line">			count += loadBeanDefinitions(resource);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> count;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>进入 <code>loadBeanDefinitions()</code>方法<br>类文件：<code>org.springframework.beans.factory.xml.XmlBeanDefinitionReader</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 获取Resource对象中的xml文件流对象，转换成InputSource对象</span></span><br><span class="line"><span class="comment">*  InputSource是jdk中的sax xml文件解析对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(EncodedResource encodedResource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">		Assert.notNull(encodedResource, <span class="string">&quot;EncodedResource must not be null&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">			logger.trace(<span class="string">&quot;Loading XML bean definitions from &quot;</span> + encodedResource);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Set&lt;EncodedResource&gt; currentResources = <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.get();</span><br><span class="line">		<span class="keyword">if</span> (currentResources == <span class="keyword">null</span>) &#123;</span><br><span class="line">			currentResources = <span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">			<span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.set(currentResources);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!currentResources.add(encodedResource)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">					<span class="string">&quot;Detected cyclic loading of &quot;</span> + encodedResource + <span class="string">&quot; - check your import definitions!&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//获取Resource对象中的xml文件流对象</span></span><br><span class="line">			InputStream inputStream = encodedResource.getResource().getInputStream();</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="comment">// 把文件流对象包装成 InputSource</span></span><br><span class="line">				<span class="comment">// 注：InputSource是jdk包org.xml.sax中负责XML文档解析</span></span><br><span class="line">				InputSource inputSource = <span class="keyword">new</span> InputSource(inputStream);</span><br><span class="line">				<span class="keyword">if</span> (encodedResource.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">					inputSource.setEncoding(encodedResource.getEncoding());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//主要看这个方法  重要程度 5</span></span><br><span class="line">				<span class="keyword">return</span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">finally</span> &#123;</span><br><span class="line">				inputStream.close();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">					<span class="string">&quot;IOException parsing XML document from &quot;</span> + encodedResource.getResource(), ex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">			currentResources.remove(encodedResource);</span><br><span class="line">			<span class="keyword">if</span> (currentResources.isEmpty()) &#123;</span><br><span class="line">				<span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.remove();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h4 id="doLoadBeanDefinitions"><a href="#doLoadBeanDefinitions" class="headerlink" title="doLoadBeanDefinitions()"></a>doLoadBeanDefinitions()</h4><blockquote>
<p>进入 <code>doLoadBeanDefinitions()</code>方法<br>类文件：<code>org.springframework.beans.factory.xml.XmlBeanDefinitionReader</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 最后封装成 BeanDefinition 对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">doLoadBeanDefinitions</span><span class="params">(InputSource inputSource, Resource resource)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//把inputSource 封装成Document文件对象，这是jdk的API</span></span><br><span class="line">			Document doc = doLoadDocument(inputSource, resource);</span><br><span class="line">			<span class="comment">//主要看这个方法，根据解析出来的document对象，拿到里面的标签元素封装成BeanDefinition</span></span><br><span class="line">			<span class="keyword">int</span> count = registerBeanDefinitions(doc, resource);</span><br><span class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(<span class="string">&quot;Loaded &quot;</span> + count + <span class="string">&quot; bean definitions from &quot;</span> + resource);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> count;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> ex;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (SAXParseException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">					<span class="string">&quot;Line &quot;</span> + ex.getLineNumber() + <span class="string">&quot; in XML document from &quot;</span> + resource + <span class="string">&quot; is invalid&quot;</span>, ex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (SAXException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">					<span class="string">&quot;XML document from &quot;</span> + resource + <span class="string">&quot; is invalid&quot;</span>, ex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (ParserConfigurationException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">					<span class="string">&quot;Parser configuration exception parsing XML from &quot;</span> + resource, ex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">					<span class="string">&quot;IOException parsing XML document from &quot;</span> + resource, ex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">					<span class="string">&quot;Unexpected exception parsing XML document from &quot;</span> + resource, ex);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h4 id="registerBeanDefinitions"><a href="#registerBeanDefinitions" class="headerlink" title="registerBeanDefinitions()"></a>registerBeanDefinitions()</h4><blockquote>
<p>进入 <code>registerBeanDefinitions()</code>方法<br>类文件：<code>org.springframework.beans.factory.xml.XmlBeanDefinitionReader</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 注册 BeanDefinition 对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">		<span class="comment">// 委托模式，BeanDefinitionDocumentReader委托这个类进行document的解析</span></span><br><span class="line">		BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</span><br><span class="line">		<span class="keyword">int</span> countBefore = getRegistry().getBeanDefinitionCount();</span><br><span class="line">		<span class="comment">// 主要看这个方法，createReaderContext(resource) XmlReaderContext上下文，</span></span><br><span class="line">    	<span class="comment">// 封装了XmlBeanDefinitionReader对象</span></span><br><span class="line">		documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line">		<span class="keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>类 名： <code>XmlReaderContext</code><br>所在包： <code>org.springframework.beans.factory.xml</code><br><code>XmlReaderContext</code>可以理解为XML解析过程中的上下文，特点：<br>持有了<code>XmlBeanDefinitionReader reader</code>对象的引用。<br>将解析出来的<code>BeanDefinition</code>对象缓存到<code>BeanDefinitionRegistry</code>。</p>
</blockquote>
<p>registerBeanDefinitions()</p>
<blockquote>
<p>进入 <code>registerBeanDefinitions()</code>方法<br>类文件：<code>org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 过渡，实际处理在doRegisterBeanDefinitions </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, XmlReaderContext readerContext)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.readerContext = readerContext;</span><br><span class="line">		<span class="comment">// 主要看这个方法，把root节点传进去</span></span><br><span class="line">		doRegisterBeanDefinitions(doc.getDocumentElement());</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h4 id="doRegisterBeanDefinitions"><a href="#doRegisterBeanDefinitions" class="headerlink" title="doRegisterBeanDefinitions()"></a>doRegisterBeanDefinitions()</h4><blockquote>
<p>进入 <code>doRegisterBeanDefinitions()</code>方法<br>类文件：<code>org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 创建BeanDefinitionParserDelegate委托对象，交给parseBeanDefinitions处理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRegisterBeanDefinitions</span><span class="params">(Element root)</span> </span>&#123;</span><br><span class="line">		BeanDefinitionParserDelegate parent = <span class="keyword">this</span>.delegate;</span><br><span class="line">		<span class="keyword">this</span>.delegate = createDelegate(getReaderContext(), root, parent);</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">			String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</span><br><span class="line">			<span class="keyword">if</span> (StringUtils.hasText(profileSpec)) &#123;</span><br><span class="line">				String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</span><br><span class="line">						profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">				<span class="keyword">if</span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</span><br><span class="line">					<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">						logger.debug(<span class="string">&quot;Skipped XML bean definition file due to specified profiles [&quot;</span> + profileSpec +</span><br><span class="line">								<span class="string">&quot;] not matching: &quot;</span> + getReaderContext().getResource());</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 冗余设计，模板方法</span></span><br><span class="line">		preProcessXml(root);</span><br><span class="line">		<span class="comment">//主要看这个方法，标签具体解析过程</span></span><br><span class="line">		parseBeanDefinitions(root, <span class="keyword">this</span>.delegate);</span><br><span class="line">		postProcessXml(root);</span><br><span class="line">		<span class="keyword">this</span>.delegate = parent;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h4 id="parseBeanDefinitions"><a href="#parseBeanDefinitions" class="headerlink" title="parseBeanDefinitions()"></a>parseBeanDefinitions()</h4><blockquote>
<p>进入<code>parseBeanDefinitions()</code>方法<br>类文件：<code>org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO :XML中标签的具体解析过程</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 获取根节点</span></span><br><span class="line">		<span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">			<span class="comment">// 获取根节点里的所有子节点</span></span><br><span class="line">			NodeList nl = root.getChildNodes();</span><br><span class="line">			<span class="comment">// 循环遍历所有子节点，对整个xml文件进行解析</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">				Node node = nl.item(i);</span><br><span class="line">				<span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">					Element ele = (Element) node;</span><br><span class="line">					<span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">						<span class="comment">//默认标签解析</span></span><br><span class="line">						parseDefaultElement(ele, delegate);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> &#123;</span><br><span class="line">						<span class="comment">//自定义标签解析，通过委托类BeanDefinitionParserDelegate解析</span></span><br><span class="line">						delegate.parseCustomElement(ele);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			delegate.parseCustomElement(root);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h5 id="parseDefaultElement"><a href="#parseDefaultElement" class="headerlink" title="parseDefaultElement()"></a>parseDefaultElement()</h5><blockquote>
<p>进入<code> parseDefaultElement()</code>方法，默认标签解析<br>类文件：<code>org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 默认标签的解析</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseDefaultElement</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// import标签解析  重要程度 1 ，可看可不看</span></span><br><span class="line">		<span class="keyword">if</span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class="line">			importBeanDefinitionResource(ele);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// alias标签解析 别名标签  重要程度 1 ，可看可不看</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class="line">			processAliasRegistration(ele);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// bean标签，重要程度  5，必须看</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">			processBeanDefinition(ele, delegate);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class="line">			<span class="comment">// recurse</span></span><br><span class="line">			doRegisterBeanDefinitions(ele);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h6 id="processBeanDefinition"><a href="#processBeanDefinition" class="headerlink" title="processBeanDefinition()"></a>processBeanDefinition()</h6><blockquote>
<p>进入 <code>processBeanDefinition()</code>方法<br>类文件：<code>org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 封装BeanDefinition的过程</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processBeanDefinition</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 重点看这个方法，重要程度 5 ，解析document，封装成BeanDefinition</span></span><br><span class="line">		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span><br><span class="line">		<span class="keyword">if</span> (bdHolder != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 该方法功能不重要，设计模式重点看一下，装饰者设计模式，加上SPI设计思想</span></span><br><span class="line">			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 完成document到BeanDefinition对象转换后，对BeanDefinition对象进行缓存注册</span></span><br><span class="line">				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">				getReaderContext().error(<span class="string">&quot;Failed to register bean definition with name &#x27;&quot;</span> +</span><br><span class="line">						bdHolder.getBeanName() + <span class="string">&quot;&#x27;&quot;</span>, ele, ex);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// Send registration event.</span></span><br><span class="line">			getReaderContext().fireComponentRegistered(<span class="keyword">new</span> BeanComponentDefinition(bdHolder));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><p><code>decorateBeanDefinitionIfRequired()</code> 方法 以装饰器模式来处理 <code>BeanDefinitionHolder </code>，有以下两种：</p>
<ul>
<li>根据bean标签属性，装饰 <code>BeanDefinitionHolder</code>。</li>
<li>根据bean标签子元素，装饰 <code>BeanDefinitionHolder</code>。</li>
</ul>
</blockquote>
<h6 id="parseBeanDefinitionElement"><a href="#parseBeanDefinitionElement" class="headerlink" title="parseBeanDefinitionElement()"></a>parseBeanDefinitionElement()</h6><blockquote>
<p>进入<code> parseBeanDefinitionElement()</code>方法<br>类文件：<code>org.springframework.beans.factory.xml.BeanDefinitionParserDelegate</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 解析 Element 并返回 BeanDefinitionHolder 持有者</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinitionHolder <span class="title">parseBeanDefinitionElement</span><span class="params">(Element ele, <span class="meta">@Nullable</span> BeanDefinition containingBean)</span> </span>&#123;</span><br><span class="line">		String id = ele.getAttribute(ID_ATTRIBUTE);</span><br><span class="line">		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">		List&lt;String&gt; aliases = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">			aliases.addAll(Arrays.asList(nameArr));</span><br><span class="line">		&#125;</span><br><span class="line">		String beanName = id;</span><br><span class="line">		<span class="keyword">if</span> (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;</span><br><span class="line">			beanName = aliases.remove(<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">				logger.trace(<span class="string">&quot;No XML &#x27;id&#x27; specified - using &#x27;&quot;</span> + beanName +</span><br><span class="line">						<span class="string">&quot;&#x27; as bean name and &quot;</span> + aliases + <span class="string">&quot; as aliases&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 检查 beanName 是否重复</span></span><br><span class="line">		<span class="keyword">if</span> (containingBean == <span class="keyword">null</span>) &#123;</span><br><span class="line">			checkNameUniqueness(beanName, aliases, ele);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 重点，解析BeanDefinitionElement</span></span><br><span class="line">		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);</span><br><span class="line">		<span class="comment">// 此处省略没用的代码</span></span><br><span class="line">		......</span><br><span class="line">		String[] aliasesArray = StringUtils.toStringArray(aliases);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h2><p>返回的<code>BeanDefinitionHolder</code>为后续<code>BeanDefinition</code>注册做准备，<code>BeanDefinitionReaderUtils</code>类的<code>registerBeanDefinition()</code>方法需要<code>BeanDefinitionHolder</code>对象作为入参进行注册。在<code>BeanDefinitionHolder</code> 对象中持有<code>beanDefinition</code>和<code>beanName</code>两个重要属性。<br><code>private final BeanDefinition beanDefinition;</code><br><code>private final String beanName;</code><br><code>private final String[] aliases;</code><br><code>aliases</code>作用：通过<code>aliases</code>找到<code>beanName</code>，根据<code>beanName</code>拿到<code>beanDefinition</code>对象。</p>
</blockquote>
<blockquote>
<p>进入 <code>parseBeanDefinitionElement()</code>方法<br>类文件：<code>org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 解析BeanDefinitionElement</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractBeanDefinition <span class="title">parseBeanDefinitionElement</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">			Element ele, String beanName, <span class="meta">@Nullable</span> BeanDefinition containingBean)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> BeanEntry(beanName));</span><br><span class="line">		String className = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</span><br><span class="line">			className = ele.getAttribute(CLASS_ATTRIBUTE).trim();</span><br><span class="line">		&#125;</span><br><span class="line">		String parent = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</span><br><span class="line">			parent = ele.getAttribute(PARENT_ATTRIBUTE);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 创建GenericBeanDefinition对象</span></span><br><span class="line">			AbstractBeanDefinition bd = createBeanDefinition(className, parent);</span><br><span class="line">			<span class="comment">// 解析bean标签的属性，并把解析出来的属性设置到BeanDefinition对象中</span></span><br><span class="line">			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</span><br><span class="line">			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));</span><br><span class="line">			<span class="comment">// 解析bean中的meta标签</span></span><br><span class="line">			parseMetaElements(ele, bd);</span><br><span class="line">			<span class="comment">// 解析bean中的lookup-method标签  重要程度：2，可看可不看</span></span><br><span class="line">			parseLookupOverrideSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">			<span class="comment">// 解析bean中的replaced-method标签  重要程度：2，可看可不看</span></span><br><span class="line">			parseReplacedMethodSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">			<span class="comment">// 解析bean中的constructor-arg标签  重要程度：2，可看可不看</span></span><br><span class="line">			parseConstructorArgElements(ele, bd);</span><br><span class="line">			<span class="comment">// 解析bean中的property标签  重要程度：2，可看可不看</span></span><br><span class="line">			parsePropertyElements(ele, bd);</span><br><span class="line">			<span class="comment">// 可以不看，用不到</span></span><br><span class="line">			parseQualifierElements(ele, bd);</span><br><span class="line">			bd.setResource(<span class="keyword">this</span>.readerContext.getResource());</span><br><span class="line">			bd.setSource(extractSource(ele));</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> bd;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">			error(<span class="string">&quot;Bean class [&quot;</span> + className + <span class="string">&quot;] not found&quot;</span>, ele, ex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (NoClassDefFoundError err) &#123;</span><br><span class="line">			error(<span class="string">&quot;Class that bean class [&quot;</span> + className + <span class="string">&quot;] depends on not found&quot;</span>, ele, err);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">			error(<span class="string">&quot;Unexpected failure during bean definition parsing&quot;</span>, ele, ex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">this</span>.parseState.pop();</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h2></blockquote>
<blockquote>
<p><code>&lt;bean&gt;</code>标签 解析完成，会统一放到<code>BeanDefinition</code>中。<br> <code>&lt;lookup-method&gt;、&lt;replaced-method&gt;、&lt;property&gt;</code>这种子标签会放到<code>MutablePropertyValues</code> 类中。<br><code>&lt;constructor-arg&gt;</code>子标签会放到<code> ConstructorArgumentValues</code> 类中。</p>
</blockquote>
<h6 id="parseBeanDefinitionAttributes"><a href="#parseBeanDefinitionAttributes" class="headerlink" title="parseBeanDefinitionAttributes()"></a>parseBeanDefinitionAttributes()</h6><blockquote>
<p>进入<code>parseBeanDefinitionAttributes()</code>方法，最终的<code>BeanDefinition</code>属性在这里统一解析。<br><code>BeanDefinitionParserDelegate</code> 委托类包含了所有bean 标签元素的属性常量。<br>类文件：<code>org.springframework.beans.factory.xml.BeanDefinitionParserDelegate</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AbstractBeanDefinition <span class="title">parseBeanDefinitionAttributes</span><span class="params">(Element ele, String beanName,</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@Nullable</span> BeanDefinition containingBean, AbstractBeanDefinition bd)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (ele.hasAttribute(SINGLETON_ATTRIBUTE)) &#123;</span><br><span class="line">			error(<span class="string">&quot;Old 1.x &#x27;singleton&#x27; attribute in use - upgrade to &#x27;scope&#x27; declaration&quot;</span>, ele);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (ele.hasAttribute(SCOPE_ATTRIBUTE)) &#123;</span><br><span class="line">			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (containingBean != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">// Take default from containing bean in case of an inner bean definition.</span></span><br><span class="line">			bd.setScope(containingBean.getScope());</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">if</span> (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) &#123;</span><br><span class="line">			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)));</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE);</span><br><span class="line">		<span class="keyword">if</span> (DEFAULT_VALUE.equals(lazyInit)) &#123;</span><br><span class="line">			lazyInit = <span class="keyword">this</span>.defaults.getLazyInit();</span><br><span class="line">		&#125;</span><br><span class="line">		bd.setLazyInit(TRUE_VALUE.equals(lazyInit));</span><br><span class="line">	</span><br><span class="line">		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE);</span><br><span class="line">		bd.setAutowireMode(getAutowireMode(autowire));</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">if</span> (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) &#123;</span><br><span class="line">			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE);</span><br><span class="line">			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS));</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="comment">//这个属性有代码案例演示，请参看案例</span></span><br><span class="line">		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE);</span><br><span class="line">		<span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) &#123;</span><br><span class="line">			String candidatePattern = <span class="keyword">this</span>.defaults.getAutowireCandidates();</span><br><span class="line">			<span class="keyword">if</span> (candidatePattern != <span class="keyword">null</span>) &#123;</span><br><span class="line">				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern);</span><br><span class="line">				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate));</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="comment">//这个属性有代码案例演示，请参看案例</span></span><br><span class="line">		<span class="keyword">if</span> (ele.hasAttribute(PRIMARY_ATTRIBUTE)) &#123;</span><br><span class="line">			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)));</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="comment">//这个属性有代码案例演示，请参看案例</span></span><br><span class="line">		<span class="keyword">if</span> (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) &#123;</span><br><span class="line">			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE);</span><br><span class="line">			bd.setInitMethodName(initMethodName);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.defaults.getInitMethod() != <span class="keyword">null</span>) &#123;</span><br><span class="line">			bd.setInitMethodName(<span class="keyword">this</span>.defaults.getInitMethod());</span><br><span class="line">			bd.setEnforceInitMethod(<span class="keyword">false</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="comment">//这个属性有代码案例演示，请参看案例</span></span><br><span class="line">		<span class="keyword">if</span> (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) &#123;</span><br><span class="line">			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE);</span><br><span class="line">			bd.setDestroyMethodName(destroyMethodName);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.defaults.getDestroyMethod() != <span class="keyword">null</span>) &#123;</span><br><span class="line">			bd.setDestroyMethodName(<span class="keyword">this</span>.defaults.getDestroyMethod());</span><br><span class="line">			bd.setEnforceDestroyMethod(<span class="keyword">false</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="comment">//这个属性有代码案例演示，请参看案例</span></span><br><span class="line">		<span class="keyword">if</span> (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) &#123;</span><br><span class="line">			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//这个属性有代码案例演示，请参看案例</span></span><br><span class="line">		<span class="keyword">if</span> (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) &#123;</span><br><span class="line">			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE));</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> bd;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h6 id="registerBeanDefinition"><a href="#registerBeanDefinition" class="headerlink" title="registerBeanDefinition()"></a><code>registerBeanDefinition()</code></h6><blockquote>
<p>返回到 <code>DefaultBeanDefinitionDocumentReader</code>的 <code>processBeanDefinition()</code>方法继续往下走，第一步已经对<code>BeanDefinition</code>属性解析完成，返回<code> BeanDefinitionHolder</code>对象，接下来要注册 <code>registerBeanDefinition</code>。<br>进入<code>registerBeanDefinition()</code>方法<br>类文件：<code>org.springframework.beans.factory.support.BeanDefinitionReaderUtils</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">	BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span></span></span><br><span class="line"><span class="function">	<span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">		String beanName = definitionHolder.getBeanName();</span><br><span class="line">		<span class="comment">// 完成BeanDefinition的注册，重点看，重要程度 5</span></span><br><span class="line">		registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</span><br><span class="line">		<span class="comment">// 建立别名和 id的映射，这样就可以根据别名获取到id</span></span><br><span class="line">		String[] aliases = definitionHolder.getAliases();</span><br><span class="line">		<span class="keyword">if</span> (aliases != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (String alias : aliases) &#123;</span><br><span class="line">				registry.registerAlias(beanName, alias);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>进入<code>registerBeanDefinition() </code>方法，最终完成默认的注册。<br>类文件：<code>org.springframework.beans.factory.support.DefaultListableBeanFactory</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">		Assert.hasText(beanName, <span class="string">&quot;Bean name must not be empty&quot;</span>);</span><br><span class="line">		Assert.notNull(beanDefinition, <span class="string">&quot;BeanDefinition must not be null&quot;</span>);</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">if</span> (beanDefinition <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				((AbstractBeanDefinition) beanDefinition).validate();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">						<span class="string">&quot;Validation of bean definition failed&quot;</span>, ex);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="comment">// 先判断 BeanDefinition 是否已经注册</span></span><br><span class="line">		BeanDefinition existingDefinition = <span class="keyword">this</span>.beanDefinitionMap.get(beanName);</span><br><span class="line">		<span class="keyword">if</span> (existingDefinition != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!isAllowBeanDefinitionOverriding()) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionOverrideException(beanName, beanDefinition, existingDefinition);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// ...... 省略 ......</span></span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// 把 beanDefinition 缓存到map中</span></span><br><span class="line">				<span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">				<span class="comment">// 把 beanName 放到 beanDefinitionNames list中，bean实例化的时候需要用到</span></span><br><span class="line">				<span class="keyword">this</span>.beanDefinitionNames.add(beanName);</span><br><span class="line">				<span class="keyword">this</span>.manualSingletonNames.remove(beanName);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>.frozenBeanDefinitionNames = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">if</span> (existingDefinition != <span class="keyword">null</span> || containsSingleton(beanName)) &#123;</span><br><span class="line">			resetBeanDefinition(beanName);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h2><p><code>DefaultListableBeanFactory</code>类的<code>registerBeanDefinition</code>方法，最终会把bean名称和<code>beanDefinition</code>放到 <code>Map&lt;String, BeanDefinition&gt; beanDefinitionMap = new ConcurrentHashMap&lt;&gt;(256)</code>的 容器中，并且把bean名称放到<code>List&lt;String&gt; beanDefinitionNames = new ArrayList&lt;&gt;(256)</code>的 list容器中缓存起来。</p>
</blockquote>
<h5 id="parseCustomElement"><a href="#parseCustomElement" class="headerlink" title="parseCustomElement()"></a><code>parseCustomElement()</code></h5><blockquote>
<p>至此，默认标签的解析过程全部完成。<br>返回到 <code>DefaultBeanDefinitionDocumentReader</code> 的 <code>parseBeanDefinitions </code>方法<br>进入 <code>parseCustomElement()</code>方法，自定义标签解析<br>类文件：<code>org.springframework.beans.factory.xml.BeanDefinitionParserDelegate</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 自定义标签交给BeanDefinitionParserDelegate 委托类来解析</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parseCustomElement</span><span class="params">(Element ele, <span class="meta">@Nullable</span> BeanDefinition containingBd)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 获取命名空间的URI</span></span><br><span class="line">		String namespaceUri = getNamespaceURI(ele);</span><br><span class="line">		<span class="keyword">if</span> (namespaceUri == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// SPI设计，获取/META-INF/spring.handers中URI对应的Hander处理类</span></span><br><span class="line">		NamespaceHandler handler = <span class="keyword">this</span>.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);</span><br><span class="line">		<span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">			error(<span class="string">&quot;Unable to locate Spring NamespaceHandler for XML schema namespace [&quot;</span> + namespaceUri + <span class="string">&quot;]&quot;</span>, ele);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 执行 实现类NamespaceHandlerSupport 中的parse 方法</span></span><br><span class="line">		<span class="keyword">return</span> handler.parse(ele, <span class="keyword">new</span> ParserContext(<span class="keyword">this</span>.readerContext, <span class="keyword">this</span>, containingBd));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h2><p><code>getNamespaceHandlerResolver().resolve()</code>方法 ，实际由<code>DefaultNamespaceHandlerResolver.resolve()</code>方法实现，<code>DefaultNamespaceHandlerResolver</code>类 实现了<code>NamespaceHandlerResolver</code>接口。具体解析内容如下：<br>获取<code>spring</code>中所有jar包里面的<code>META-INF/spring.handlers</code>文件，并且建立映射关系。<br>根据<code>namespaceUri</code>获取到这个命名空间的处理类。<br>调用处理类的init()方法，在init()方法中完成标签元素解析类的注册。</p>
</blockquote>
<h6 id="parse"><a href="#parse" class="headerlink" title="parse()"></a>parse()</h6><blockquote>
<p>进入<code>parse()</code>方法<br>类文件：<code>org.springframework.beans.factory.xml.NamespaceHandlerSupport</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 委托BeanDefinitionParser类解析元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 获取自定义组件名 对应的解析方法</span></span><br><span class="line">		BeanDefinitionParser parser = findParserForElement(element, parserContext);</span><br><span class="line">		<span class="comment">// 调用ComponentScanBeanDefinitionParser实现类中的 parse方法</span></span><br><span class="line">		<span class="keyword">return</span> (parser != <span class="keyword">null</span> ? parser.parse(element, parserContext) : <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="findParserForElement"><a href="#findParserForElement" class="headerlink" title="findParserForElement()"></a><code>findParserForElement()</code></h6><blockquote>
<p>进入<code>findParserForElement()</code>方法<br>类文件：<code>org.springframework.beans.factory.xml.NamespaceHandlerSupport</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 从map中根据组件名称获取绑定的解析方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> BeanDefinitionParser <span class="title">findParserForElement</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 获取组件名称</span></span><br><span class="line">		String localName = parserContext.getDelegate().getLocalName(element);</span><br><span class="line">		<span class="comment">// Map&lt;String, BeanDefinitionParser&gt; parsers = new HashMap&lt;&gt;()</span></span><br><span class="line">		BeanDefinitionParser parser = <span class="keyword">this</span>.parsers.get(localName);</span><br><span class="line">		<span class="keyword">if</span> (parser == <span class="keyword">null</span>) &#123;</span><br><span class="line">			parserContext.getReaderContext().fatal(</span><br><span class="line">					<span class="string">&quot;Cannot locate BeanDefinitionParser for element [&quot;</span> + localName + <span class="string">&quot;]&quot;</span>, element);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> parser;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>小结<br>此处<code>this.parsers.get()</code>之所以有值，是因为在<code>/META-INF/spring.handers</code>中URI对应的Hander处理类初始化的时候 通过<code>init()</code>方法中 执行<code>registerBeanDefinitionParser()</code>，来调用<code>this.parsers.set(&#39;标签元素&#39;,&#39;解析类&#39;)</code>设置的。</p>
</blockquote>
<h6 id="parse-1"><a href="#parse-1" class="headerlink" title="parse()"></a>parse()</h6><blockquote>
<p><code>findParserForElement()</code>方法解析完，返回一个对应标签元素的解析类<br>进入parse()方法<br>类文件：<code>org.springframework.context.annotation.ComponentScanBeanDefinitionParser</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">TODO:</span> 核心解析</span></span><br><span class="line"><span class="comment"> * 1、扫描路径.class后缀的文件</span></span><br><span class="line"><span class="comment"> * 2、要判断类上是否有注解</span></span><br><span class="line"><span class="comment"> * 3、GenericBeanDefinition genericBeanDefinition = new GenericBeanDefinition();</span></span><br><span class="line"><span class="comment"> *    genericBeanDefinition.setBeanClass(BeanClass.class);</span></span><br><span class="line"><span class="comment"> * 4、完成beanDefinition注册</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//获取basePackage属性</span></span><br><span class="line">		String basePackage = element.getAttribute(BASE_PACKAGE_ATTRIBUTE);</span><br><span class="line">		basePackage = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(basePackage);</span><br><span class="line">		<span class="comment">//可以用逗号分开</span></span><br><span class="line">		String[] basePackages = StringUtils.tokenizeToStringArray(basePackage,</span><br><span class="line">				ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);</span><br><span class="line">		<span class="comment">//创建注解扫描器</span></span><br><span class="line">		<span class="comment">// Actually scan for bean definitions and register them.</span></span><br><span class="line">		ClassPathBeanDefinitionScanner scanner = configureScanner(parserContext, element);</span><br><span class="line">		<span class="comment">//扫描并把扫描的类封装成beanDefinition对象  核心方法，重要程度 5</span></span><br><span class="line">		Set&lt;BeanDefinitionHolder&gt; beanDefinitions = scanner.doScan(basePackages);</span><br><span class="line">		registerComponents(parserContext.getReaderContext(), beanDefinitions, element);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h6 id="configureScanner"><a href="#configureScanner" class="headerlink" title="configureScanner()"></a><code>configureScanner()</code></h6><blockquote>
<p>进入<code>configureScanner()</code>方法，看看如何创建注解扫描器的<br>类文件：<code>org.springframework.context.annotation.ComponentScanBeanDefinitionParser</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ClassPathBeanDefinitionScanner <span class="title">configureScanner</span><span class="params">(ParserContext parserContext, Element element)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//使用默认的过滤器</span></span><br><span class="line">		<span class="keyword">boolean</span> useDefaultFilters = <span class="keyword">true</span>;</span><br><span class="line">		<span class="comment">//@Service @Component  默认filter</span></span><br><span class="line">		<span class="keyword">if</span> (element.hasAttribute(USE_DEFAULT_FILTERS_ATTRIBUTE)) &#123;</span><br><span class="line">			useDefaultFilters = Boolean.valueOf(element.getAttribute(USE_DEFAULT_FILTERS_ATTRIBUTE));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//创建注解的扫描器，主要看这个方法</span></span><br><span class="line">		ClassPathBeanDefinitionScanner scanner = createScanner(parserContext.getReaderContext(), useDefaultFilters);</span><br><span class="line">		scanner.setBeanDefinitionDefaults(parserContext.getDelegate().getBeanDefinitionDefaults());</span><br><span class="line">		scanner.setAutowireCandidatePatterns(parserContext.getDelegate().getAutowireCandidatePatterns());</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">if</span> (element.hasAttribute(RESOURCE_PATTERN_ATTRIBUTE)) &#123;</span><br><span class="line">			scanner.setResourcePattern(element.getAttribute(RESOURCE_PATTERN_ATTRIBUTE));</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 解析子标签，不用看</span></span><br><span class="line">			parseBeanNameGenerator(element, scanner);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">			parserContext.getReaderContext().error(ex.getMessage(), parserContext.extractSource(element), ex.getCause());</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 解析子标签，不用看</span></span><br><span class="line">			parseScope(element, scanner);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">			parserContext.getReaderContext().error(ex.getMessage(), parserContext.extractSource(element), ex.getCause());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 会扫描含有&quot;include-filter&quot;和&quot;exclude-filter&quot;属性进行解析</span></span><br><span class="line">		parseTypeFilters(element, scanner, parserContext);</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> scanner;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h6 id="createScanner"><a href="#createScanner" class="headerlink" title="createScanner()"></a><code>createScanner()</code></h6><blockquote>
<p>进入 <code>createScanner()</code>方法，<br>类文件：<code>org.springframework.context.annotation.ComponentScanBeanDefinitionParser</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ClassPathBeanDefinitionScanner <span class="title">createScanner</span><span class="params">(XmlReaderContext readerContext, <span class="keyword">boolean</span> useDefaultFilters)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ClassPathBeanDefinitionScanner(readerContext.getRegistry(), useDefaultFilters,</span><br><span class="line">				readerContext.getEnvironment(), readerContext.getResourceLoader());</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h6 id="ClassPathBeanDefinitionScanner"><a href="#ClassPathBeanDefinitionScanner" class="headerlink" title="ClassPathBeanDefinitionScanner()"></a><code>ClassPathBeanDefinitionScanner()</code></h6><blockquote>
<p>进入 <code>ClassPathBeanDefinitionScanner()</code>方法，<br>类文件：<code>org.springframework.context.annotation.ClassPathBeanDefinitionScanner</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathBeanDefinitionScanner</span><span class="params">(BeanDefinitionRegistry registry, <span class="keyword">boolean</span> useDefaultFilters,</span></span></span><br><span class="line"><span class="params"><span class="function">			Environment environment, <span class="meta">@Nullable</span> ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line">		Assert.notNull(registry, <span class="string">&quot;BeanDefinitionRegistry must not be null&quot;</span>);</span><br><span class="line">		<span class="keyword">this</span>.registry = registry;</span><br><span class="line">		<span class="comment">//使用默认的过滤器</span></span><br><span class="line">		<span class="keyword">if</span> (useDefaultFilters) &#123;</span><br><span class="line">			<span class="comment">//主要处理方法</span></span><br><span class="line">			registerDefaultFilters();</span><br><span class="line">		&#125;</span><br><span class="line">		setEnvironment(environment);</span><br><span class="line">		setResourceLoader(resourceLoader);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h6 id="registerDefaultFilters"><a href="#registerDefaultFilters" class="headerlink" title="registerDefaultFilters()"></a><code>registerDefaultFilters()</code></h6><blockquote>
<p>进入<code>registerDefaultFilters()</code>方法，默认的<br>类文件：<code>org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  TODO : 使用默认过滤规则 处理指定的注解类，然后注册</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerDefaultFilters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 过滤器中添加需要扫描的注解类型</span></span><br><span class="line">		<span class="comment">// 将注解添加到 AnnotationTypeFilter包装类</span></span><br><span class="line">		<span class="keyword">this</span>.includeFilters.add(<span class="keyword">new</span> AnnotationTypeFilter(Component.class));</span><br><span class="line">		<span class="comment">// 确保类注解是 ClassPathScanningCandidateComponentProvider的类加载器</span></span><br><span class="line">		ClassLoader cl = ClassPathScanningCandidateComponentProvider.class.getClassLoader();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">this</span>.includeFilters.add(<span class="keyword">new</span> AnnotationTypeFilter(</span><br><span class="line">					((Class&lt;? extends Annotation&gt;) ClassUtils.forName(<span class="string">&quot;javax.annotation.ManagedBean&quot;</span>, cl)), <span class="keyword">false</span>));</span><br><span class="line">			logger.trace(<span class="string">&quot;JSR-250 &#x27;javax.annotation.ManagedBean&#x27; found and supported for component scanning&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">			<span class="comment">// JSR-250 1.1 API (as included in Java EE 6) not available - simply skip.</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">this</span>.includeFilters.add(<span class="keyword">new</span> AnnotationTypeFilter(</span><br><span class="line">					((Class&lt;? extends Annotation&gt;) ClassUtils.forName(<span class="string">&quot;javax.inject.Named&quot;</span>, cl)), <span class="keyword">false</span>));</span><br><span class="line">			logger.trace(<span class="string">&quot;JSR-330 &#x27;javax.inject.Named&#x27; annotation found and supported for component scanning&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">			<span class="comment">// JSR-330 API not available - simply skip.</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h2 id="小结-7"><a href="#小结-7" class="headerlink" title="小结"></a>小结</h2><p>过滤器将会拦截<code>@Component</code>注解标注的类，包括被<code>@Component</code>标注的<code>@Service</code>，<code>@Repository</code>，<code>@Controller</code>以及<code>Java EE 6</code>的<code>javax.annotation.ManagedBean， JSR-330的javax.inject.Named </code>。<br>将拦截到的注解添加到<code>List&lt;TypeFilter&gt; includeFilters = new LinkedList&lt;&gt;()</code> 容器中。<br>最后，根据匹配的<code>metadataReader</code>生成<code>ScannedGenericBeanDefinition</code>。<br><code>@see ClassPathScanningCandidateComponentProvider#scanCandidateComponents()</code></p>
</blockquote>
<h6 id="doScan"><a href="#doScan" class="headerlink" title="doScan()"></a><code>doScan()</code></h6><blockquote>
<p>至此注解扫描器创建过程完毕，注解类填充到List中，<br>返回<code>parse()</code>方法，进入<code>doScan()</code>方法，<br>类文件：<code>org.springframework.context.annotation.ClassPathBeanDefinitionScanner</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 根据base-package中的字符串扫描封装 BeanDefinition对象，执行BeanDefinition注册</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Set&lt;BeanDefinitionHolder&gt; <span class="title">doScan</span><span class="params">(String... basePackages)</span> </span>&#123;</span><br><span class="line">		Assert.notEmpty(basePackages, <span class="string">&quot;At least one base package must be specified&quot;</span>);</span><br><span class="line">		Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">		<span class="keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line">			<span class="comment">// 扫描到有注解的类并封装成 BeanDefinition对象</span></span><br><span class="line">			Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</span><br><span class="line">			<span class="keyword">for</span> (BeanDefinition candidate : candidates) &#123;</span><br><span class="line">				ScopeMetadata scopeMetadata = <span class="keyword">this</span>.scopeMetadataResolver.resolveScopeMetadata(candidate);</span><br><span class="line">				candidate.setScope(scopeMetadata.getScopeName());</span><br><span class="line">				String beanName = <span class="keyword">this</span>.beanNameGenerator.generateBeanName(candidate, <span class="keyword">this</span>.registry);</span><br><span class="line">				<span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">					postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">					<span class="comment">// 支持了@Lazy @DependOn注解</span></span><br><span class="line">					AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (checkCandidate(beanName, candidate)) &#123;</span><br><span class="line">					BeanDefinitionHolder definitionHolder = <span class="keyword">new</span> BeanDefinitionHolder(candidate, beanName);</span><br><span class="line">					<span class="comment">//这里不看</span></span><br><span class="line">					definitionHolder =</span><br><span class="line">							AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">					beanDefinitions.add(definitionHolder);</span><br><span class="line">					<span class="comment">// BeanDefinition注册</span></span><br><span class="line">					registerBeanDefinition(definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> beanDefinitions;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h6 id="registerBeanDefinition-1"><a href="#registerBeanDefinition-1" class="headerlink" title="registerBeanDefinition()"></a><code>registerBeanDefinition()</code></h6><blockquote>
<p>进入<code>registerBeanDefinition()</code>方法<br>类文件：<code>org.springframework.beans.factory.support.BeanDefinitionReaderUtils</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* TODO : 向指定的bean工厂注册BeanDefinition</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">			BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Register bean definition under primary name.</span></span><br><span class="line">		String beanName = definitionHolder.getBeanName();</span><br><span class="line">	</span><br><span class="line">		<span class="comment">//完成BeanDefinition的注册，重点看，重要程度 5</span></span><br><span class="line">		registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</span><br><span class="line">	</span><br><span class="line">		<span class="comment">//建立别名和 id的映射，这样就可以根据别名获取到id</span></span><br><span class="line">		<span class="comment">// Register aliases for bean name, if any.</span></span><br><span class="line">		String[] aliases = definitionHolder.getAliases();</span><br><span class="line">		<span class="keyword">if</span> (aliases != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (String alias : aliases) &#123;</span><br><span class="line">				registry.registerAlias(beanName, alias);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>进入<code>registerBeanDefinition()</code>方法，最终完成自定义标签的注册。<br>类文件：<code>org.springframework.beans.factory.support.DefaultListableBeanFactory</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)</span><br><span class="line">			throws BeanDefinitionStoreException &#123;</span><br><span class="line"></span><br><span class="line">		Assert.hasText(beanName, &quot;Bean name must not be empty&quot;);</span><br><span class="line">		Assert.notNull(beanDefinition, &quot;BeanDefinition must not be null&quot;);</span><br><span class="line">	</span><br><span class="line">		if (beanDefinition instanceof AbstractBeanDefinition) &#123;</span><br><span class="line">			try &#123;</span><br><span class="line">				((AbstractBeanDefinition) beanDefinition).validate();</span><br><span class="line">			&#125;</span><br><span class="line">			catch (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">				throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">						&quot;Validation of bean definition failed&quot;, ex);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		// 先判断 BeanDefinition是否已经注册</span><br><span class="line">		BeanDefinition existingDefinition = this.beanDefinitionMap.get(beanName);</span><br><span class="line">		if (existingDefinition != null) &#123;</span><br><span class="line">			if (!isAllowBeanDefinitionOverriding()) &#123;</span><br><span class="line">				throw new BeanDefinitionOverrideException(beanName, beanDefinition, existingDefinition);</span><br><span class="line">			&#125;</span><br><span class="line">			// ...... 省略 ......</span><br><span class="line">			else &#123;</span><br><span class="line">				// 把 beanDefinition 缓存到map中</span><br><span class="line">				this.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">				//把 beanName放到 beanDefinitionNames list中，bean实例化的时候需要用到</span><br><span class="line">				this.beanDefinitionNames.add(beanName);</span><br><span class="line">				this.manualSingletonNames.remove(beanName);</span><br><span class="line">			&#125;</span><br><span class="line">			this.frozenBeanDefinitionNames = null;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		if (existingDefinition != null || containsSingleton(beanName)) &#123;</span><br><span class="line">			resetBeanDefinition(beanName);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>至此，自定义标签的解析过程全部完成。</p>
</blockquote>
<blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> 最终保存方式和默认标签的保存方式一致，都是放到对应的两个Map容器缓存起来。  同时，核心方法<code>refresh()</code>中的 <code>obtainFreshBeanFactory()</code>方法执行完成，解析出来的xml标签封装 成BeanDefinition对象，然后通过<code>getBeanFactory()</code>方法 返回 <code>ConfigurableListableBeanFactory</code>对象，至此创建填充<code>BeanFactory</code>的功能也全部完成。以上是核心方法refresh()中的<code> obtainFreshBeanFactory()</code>方法中涉及的相关源码内容。</p>
</blockquote>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>spring源码</tag>
      </tags>
  </entry>
</search>
